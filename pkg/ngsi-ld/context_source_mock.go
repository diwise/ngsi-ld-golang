// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package ngsi

import (
	"sync"
)

// Ensure, that ContextSourceMock does implement ContextSource.
// If this is not the case, regenerate this file with moq.
var _ ContextSource = &ContextSourceMock{}

// ContextSourceMock is a mock implementation of ContextSource.
//
// 	func TestSomethingThatUsesContextSource(t *testing.T) {
//
// 		// make and configure a mocked ContextSource
// 		mockedContextSource := &ContextSourceMock{
// 			CreateEntityFunc: func(typeName string, entityID string, request Request) error {
// 				panic("mock out the CreateEntity method")
// 			},
// 			GetEntitiesFunc: func(query Query, callback QueryEntitiesCallback) error {
// 				panic("mock out the GetEntities method")
// 			},
// 			GetProvidedTypeFromIDFunc: func(entityID string) (string, error) {
// 				panic("mock out the GetProvidedTypeFromID method")
// 			},
// 			ProvidesAttributeFunc: func(attributeName string) bool {
// 				panic("mock out the ProvidesAttribute method")
// 			},
// 			ProvidesEntitiesWithMatchingIDFunc: func(entityID string) bool {
// 				panic("mock out the ProvidesEntitiesWithMatchingID method")
// 			},
// 			ProvidesTypeFunc: func(typeName string) bool {
// 				panic("mock out the ProvidesType method")
// 			},
// 			RetrieveEntityFunc: func(entityID string, request Request) (Entity, error) {
// 				panic("mock out the RetrieveEntity method")
// 			},
// 			UpdateEntityAttributesFunc: func(entityID string, request Request) error {
// 				panic("mock out the UpdateEntityAttributes method")
// 			},
// 		}
//
// 		// use mockedContextSource in code that requires ContextSource
// 		// and then make assertions.
//
// 	}
type ContextSourceMock struct {
	// CreateEntityFunc mocks the CreateEntity method.
	CreateEntityFunc func(typeName string, entityID string, request Request) error

	// GetEntitiesFunc mocks the GetEntities method.
	GetEntitiesFunc func(query Query, callback QueryEntitiesCallback) error

	// GetProvidedTypeFromIDFunc mocks the GetProvidedTypeFromID method.
	GetProvidedTypeFromIDFunc func(entityID string) (string, error)

	// ProvidesAttributeFunc mocks the ProvidesAttribute method.
	ProvidesAttributeFunc func(attributeName string) bool

	// ProvidesEntitiesWithMatchingIDFunc mocks the ProvidesEntitiesWithMatchingID method.
	ProvidesEntitiesWithMatchingIDFunc func(entityID string) bool

	// ProvidesTypeFunc mocks the ProvidesType method.
	ProvidesTypeFunc func(typeName string) bool

	// RetrieveEntityFunc mocks the RetrieveEntity method.
	RetrieveEntityFunc func(entityID string, request Request) (Entity, error)

	// UpdateEntityAttributesFunc mocks the UpdateEntityAttributes method.
	UpdateEntityAttributesFunc func(entityID string, request Request) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateEntity holds details about calls to the CreateEntity method.
		CreateEntity []struct {
			// TypeName is the typeName argument value.
			TypeName string
			// EntityID is the entityID argument value.
			EntityID string
			// Request is the request argument value.
			Request Request
		}
		// GetEntities holds details about calls to the GetEntities method.
		GetEntities []struct {
			// Query is the query argument value.
			Query Query
			// Callback is the callback argument value.
			Callback QueryEntitiesCallback
		}
		// GetProvidedTypeFromID holds details about calls to the GetProvidedTypeFromID method.
		GetProvidedTypeFromID []struct {
			// EntityID is the entityID argument value.
			EntityID string
		}
		// ProvidesAttribute holds details about calls to the ProvidesAttribute method.
		ProvidesAttribute []struct {
			// AttributeName is the attributeName argument value.
			AttributeName string
		}
		// ProvidesEntitiesWithMatchingID holds details about calls to the ProvidesEntitiesWithMatchingID method.
		ProvidesEntitiesWithMatchingID []struct {
			// EntityID is the entityID argument value.
			EntityID string
		}
		// ProvidesType holds details about calls to the ProvidesType method.
		ProvidesType []struct {
			// TypeName is the typeName argument value.
			TypeName string
		}
		// RetrieveEntity holds details about calls to the RetrieveEntity method.
		RetrieveEntity []struct {
			// EntityID is the entityID argument value.
			EntityID string
			// Request is the request argument value.
			Request Request
		}
		// UpdateEntityAttributes holds details about calls to the UpdateEntityAttributes method.
		UpdateEntityAttributes []struct {
			// EntityID is the entityID argument value.
			EntityID string
			// Request is the request argument value.
			Request Request
		}
	}
	lockCreateEntity                   sync.RWMutex
	lockGetEntities                    sync.RWMutex
	lockGetProvidedTypeFromID          sync.RWMutex
	lockProvidesAttribute              sync.RWMutex
	lockProvidesEntitiesWithMatchingID sync.RWMutex
	lockProvidesType                   sync.RWMutex
	lockRetrieveEntity                 sync.RWMutex
	lockUpdateEntityAttributes         sync.RWMutex
}

// CreateEntity calls CreateEntityFunc.
func (mock *ContextSourceMock) CreateEntity(typeName string, entityID string, request Request) error {
	if mock.CreateEntityFunc == nil {
		panic("ContextSourceMock.CreateEntityFunc: method is nil but ContextSource.CreateEntity was just called")
	}
	callInfo := struct {
		TypeName string
		EntityID string
		Request  Request
	}{
		TypeName: typeName,
		EntityID: entityID,
		Request:  request,
	}
	mock.lockCreateEntity.Lock()
	mock.calls.CreateEntity = append(mock.calls.CreateEntity, callInfo)
	mock.lockCreateEntity.Unlock()
	return mock.CreateEntityFunc(typeName, entityID, request)
}

// CreateEntityCalls gets all the calls that were made to CreateEntity.
// Check the length with:
//     len(mockedContextSource.CreateEntityCalls())
func (mock *ContextSourceMock) CreateEntityCalls() []struct {
	TypeName string
	EntityID string
	Request  Request
} {
	var calls []struct {
		TypeName string
		EntityID string
		Request  Request
	}
	mock.lockCreateEntity.RLock()
	calls = mock.calls.CreateEntity
	mock.lockCreateEntity.RUnlock()
	return calls
}

// GetEntities calls GetEntitiesFunc.
func (mock *ContextSourceMock) GetEntities(query Query, callback QueryEntitiesCallback) error {
	if mock.GetEntitiesFunc == nil {
		panic("ContextSourceMock.GetEntitiesFunc: method is nil but ContextSource.GetEntities was just called")
	}
	callInfo := struct {
		Query    Query
		Callback QueryEntitiesCallback
	}{
		Query:    query,
		Callback: callback,
	}
	mock.lockGetEntities.Lock()
	mock.calls.GetEntities = append(mock.calls.GetEntities, callInfo)
	mock.lockGetEntities.Unlock()
	return mock.GetEntitiesFunc(query, callback)
}

// GetEntitiesCalls gets all the calls that were made to GetEntities.
// Check the length with:
//     len(mockedContextSource.GetEntitiesCalls())
func (mock *ContextSourceMock) GetEntitiesCalls() []struct {
	Query    Query
	Callback QueryEntitiesCallback
} {
	var calls []struct {
		Query    Query
		Callback QueryEntitiesCallback
	}
	mock.lockGetEntities.RLock()
	calls = mock.calls.GetEntities
	mock.lockGetEntities.RUnlock()
	return calls
}

// GetProvidedTypeFromID calls GetProvidedTypeFromIDFunc.
func (mock *ContextSourceMock) GetProvidedTypeFromID(entityID string) (string, error) {
	if mock.GetProvidedTypeFromIDFunc == nil {
		panic("ContextSourceMock.GetProvidedTypeFromIDFunc: method is nil but ContextSource.GetProvidedTypeFromID was just called")
	}
	callInfo := struct {
		EntityID string
	}{
		EntityID: entityID,
	}
	mock.lockGetProvidedTypeFromID.Lock()
	mock.calls.GetProvidedTypeFromID = append(mock.calls.GetProvidedTypeFromID, callInfo)
	mock.lockGetProvidedTypeFromID.Unlock()
	return mock.GetProvidedTypeFromIDFunc(entityID)
}

// GetProvidedTypeFromIDCalls gets all the calls that were made to GetProvidedTypeFromID.
// Check the length with:
//     len(mockedContextSource.GetProvidedTypeFromIDCalls())
func (mock *ContextSourceMock) GetProvidedTypeFromIDCalls() []struct {
	EntityID string
} {
	var calls []struct {
		EntityID string
	}
	mock.lockGetProvidedTypeFromID.RLock()
	calls = mock.calls.GetProvidedTypeFromID
	mock.lockGetProvidedTypeFromID.RUnlock()
	return calls
}

// ProvidesAttribute calls ProvidesAttributeFunc.
func (mock *ContextSourceMock) ProvidesAttribute(attributeName string) bool {
	if mock.ProvidesAttributeFunc == nil {
		panic("ContextSourceMock.ProvidesAttributeFunc: method is nil but ContextSource.ProvidesAttribute was just called")
	}
	callInfo := struct {
		AttributeName string
	}{
		AttributeName: attributeName,
	}
	mock.lockProvidesAttribute.Lock()
	mock.calls.ProvidesAttribute = append(mock.calls.ProvidesAttribute, callInfo)
	mock.lockProvidesAttribute.Unlock()
	return mock.ProvidesAttributeFunc(attributeName)
}

// ProvidesAttributeCalls gets all the calls that were made to ProvidesAttribute.
// Check the length with:
//     len(mockedContextSource.ProvidesAttributeCalls())
func (mock *ContextSourceMock) ProvidesAttributeCalls() []struct {
	AttributeName string
} {
	var calls []struct {
		AttributeName string
	}
	mock.lockProvidesAttribute.RLock()
	calls = mock.calls.ProvidesAttribute
	mock.lockProvidesAttribute.RUnlock()
	return calls
}

// ProvidesEntitiesWithMatchingID calls ProvidesEntitiesWithMatchingIDFunc.
func (mock *ContextSourceMock) ProvidesEntitiesWithMatchingID(entityID string) bool {
	if mock.ProvidesEntitiesWithMatchingIDFunc == nil {
		panic("ContextSourceMock.ProvidesEntitiesWithMatchingIDFunc: method is nil but ContextSource.ProvidesEntitiesWithMatchingID was just called")
	}
	callInfo := struct {
		EntityID string
	}{
		EntityID: entityID,
	}
	mock.lockProvidesEntitiesWithMatchingID.Lock()
	mock.calls.ProvidesEntitiesWithMatchingID = append(mock.calls.ProvidesEntitiesWithMatchingID, callInfo)
	mock.lockProvidesEntitiesWithMatchingID.Unlock()
	return mock.ProvidesEntitiesWithMatchingIDFunc(entityID)
}

// ProvidesEntitiesWithMatchingIDCalls gets all the calls that were made to ProvidesEntitiesWithMatchingID.
// Check the length with:
//     len(mockedContextSource.ProvidesEntitiesWithMatchingIDCalls())
func (mock *ContextSourceMock) ProvidesEntitiesWithMatchingIDCalls() []struct {
	EntityID string
} {
	var calls []struct {
		EntityID string
	}
	mock.lockProvidesEntitiesWithMatchingID.RLock()
	calls = mock.calls.ProvidesEntitiesWithMatchingID
	mock.lockProvidesEntitiesWithMatchingID.RUnlock()
	return calls
}

// ProvidesType calls ProvidesTypeFunc.
func (mock *ContextSourceMock) ProvidesType(typeName string) bool {
	if mock.ProvidesTypeFunc == nil {
		panic("ContextSourceMock.ProvidesTypeFunc: method is nil but ContextSource.ProvidesType was just called")
	}
	callInfo := struct {
		TypeName string
	}{
		TypeName: typeName,
	}
	mock.lockProvidesType.Lock()
	mock.calls.ProvidesType = append(mock.calls.ProvidesType, callInfo)
	mock.lockProvidesType.Unlock()
	return mock.ProvidesTypeFunc(typeName)
}

// ProvidesTypeCalls gets all the calls that were made to ProvidesType.
// Check the length with:
//     len(mockedContextSource.ProvidesTypeCalls())
func (mock *ContextSourceMock) ProvidesTypeCalls() []struct {
	TypeName string
} {
	var calls []struct {
		TypeName string
	}
	mock.lockProvidesType.RLock()
	calls = mock.calls.ProvidesType
	mock.lockProvidesType.RUnlock()
	return calls
}

// RetrieveEntity calls RetrieveEntityFunc.
func (mock *ContextSourceMock) RetrieveEntity(entityID string, request Request) (Entity, error) {
	if mock.RetrieveEntityFunc == nil {
		panic("ContextSourceMock.RetrieveEntityFunc: method is nil but ContextSource.RetrieveEntity was just called")
	}
	callInfo := struct {
		EntityID string
		Request  Request
	}{
		EntityID: entityID,
		Request:  request,
	}
	mock.lockRetrieveEntity.Lock()
	mock.calls.RetrieveEntity = append(mock.calls.RetrieveEntity, callInfo)
	mock.lockRetrieveEntity.Unlock()
	return mock.RetrieveEntityFunc(entityID, request)
}

// RetrieveEntityCalls gets all the calls that were made to RetrieveEntity.
// Check the length with:
//     len(mockedContextSource.RetrieveEntityCalls())
func (mock *ContextSourceMock) RetrieveEntityCalls() []struct {
	EntityID string
	Request  Request
} {
	var calls []struct {
		EntityID string
		Request  Request
	}
	mock.lockRetrieveEntity.RLock()
	calls = mock.calls.RetrieveEntity
	mock.lockRetrieveEntity.RUnlock()
	return calls
}

// UpdateEntityAttributes calls UpdateEntityAttributesFunc.
func (mock *ContextSourceMock) UpdateEntityAttributes(entityID string, request Request) error {
	if mock.UpdateEntityAttributesFunc == nil {
		panic("ContextSourceMock.UpdateEntityAttributesFunc: method is nil but ContextSource.UpdateEntityAttributes was just called")
	}
	callInfo := struct {
		EntityID string
		Request  Request
	}{
		EntityID: entityID,
		Request:  request,
	}
	mock.lockUpdateEntityAttributes.Lock()
	mock.calls.UpdateEntityAttributes = append(mock.calls.UpdateEntityAttributes, callInfo)
	mock.lockUpdateEntityAttributes.Unlock()
	return mock.UpdateEntityAttributesFunc(entityID, request)
}

// UpdateEntityAttributesCalls gets all the calls that were made to UpdateEntityAttributes.
// Check the length with:
//     len(mockedContextSource.UpdateEntityAttributesCalls())
func (mock *ContextSourceMock) UpdateEntityAttributesCalls() []struct {
	EntityID string
	Request  Request
} {
	var calls []struct {
		EntityID string
		Request  Request
	}
	mock.lockUpdateEntityAttributes.RLock()
	calls = mock.calls.UpdateEntityAttributes
	mock.lockUpdateEntityAttributes.RUnlock()
	return calls
}
